@layout TelerikLayout
@inherits LayoutComponentBase
@inject HttpInterceptorService IInterceptor
@inject NavigationManager INavigation
@inject IPrincipalMenu IMenu
@inject UserService IUser 
@* @inject Blazored.LocalStorage.ILocalStorageService ILocalStorage *@
@using GestionERP.Web.Models.Dtos.Principal 
@implements IDisposable

<div class="menu-container">  
    
    @if (ExpandedMenu)
    {
        <TelerikButton Class="button-menu" Size="sm" OnClick="(() => ExpandedMenu = false)" Icon="@SvgIcon.X" FillMode="@(ThemeConstants.Button.FillMode.Flat)">Menú</TelerikButton>
    }
    else
    {
        <TelerikButton Class="button-menu" Size="sm" OnClick="@ToggleMenuDrawer" Icon="@SvgIcon.Menu" FillMode="@(ThemeConstants.Button.FillMode.Flat)">Menú</TelerikButton>
    }
    <span class="separator"></span>

    <figure>
        <a href="inicio">
            <img src="img/gerp_banner.png">
        </a> 
    </figure>
    <h3 class="tk-title">estión ERP</h3>
 
    @* <CultureChooser></CultureChooser> *@
    <LoginDisplay></LoginDisplay>
</div> 

<TelerikDrawer Width="260px" @ref="@DrawerMenuRef" Data="CatalogoMenus" @bind-Expanded="ExpandedMenu" Mode="@DrawerMode.Overlay">  
    <Template>
        @if (CatalogoMenus != null)
        {
            <div class="k-drawer-items" role="menubar" aria-orientation="vertical">
                <ul> 
                    @foreach (MenuCatalogoPorSesionDto item in context.Where(dato => dato.EsVisible))
                    { 
                        string selectedClass = item == SelectedMenuItem ? "k-selected" : string.Empty;
                        string cursorGroup = item.EsGrupo ? "k-cursor-group" : "";
                        string expandedItem = item.EsExpandido ? "k-drawer-expanded" : "";

                        <li @onclick="@(() => OnItemSelect(item))" class="k-drawer-item @selectedClass k-level-@(item.Nivel) @cursorGroup @expandedItem">
                            
                            <i class="fa-solid @(item.Icono)"></i>
                            <span class="k-item-text">@(item.NombreMenu)</span>

                            @if (item.EsExpandido && item.EsGrupo)
                            {
                                <i class="fa-solid fa-chevron-up k-arrow-align"></i>
                            }
                            else if (!item.EsExpandido && item.EsGrupo)
                            {
                                <i class="fa-solid fa-chevron-down k-arrow-align"></i>
                            }
                        </li>

                        if (item.Nivel is "0")
                        {
                            <li class="k-drawer-item k-drawer-separator k-cursor-group"></li>
                        }
                    }
                    
                </ul>
            </div>    
        }     
    </Template>
    
    <DrawerContent>  
        @Body
    </DrawerContent> 
</TelerikDrawer> 

@* <TelerikMediaQuery Media="(max-width: 768px)" OnChange="((changed) => WindowWidthSmall = changed)"></TelerikMediaQuery> *@
@code {
    public bool ExpandedMenu { get; set; } = false;  
    bool WindowWidthSmall { get; set; }
    private MenuCatalogoPorSesionDto SelectedMenuItem { get; set; } 
    private IEnumerable<MenuCatalogoPorSesionDto> CatalogoMenus { get; set; } = new List<MenuCatalogoPorSesionDto>();
    private TelerikDrawer<MenuCatalogoPorSesionDto> DrawerMenuRef { get; set; } 
    [CascadingParameter] public NotifyComponent Notify { get; set; }

    protected override void OnInitialized()
    {
        IInterceptor.RegisterEvent();
    }

    private async Task ToggleMenuDrawer()
    {
        //ExpandedMenu = await ILocalStorage.ContainKeyAsync("drawerState") ? await ILocalStorage.GetItemAsync<bool>("drawerState") : false
        if (!ExpandedMenu)
        {
            try
            {
                CatalogoMenus = default;

                if (!(await IUser.VerificarAccesoEsValido(Notify)).esValido)
                    return;

                CatalogoMenus = await IMenu.CatalogoPorSesion();
            }
            catch (Exception ex)
            {
                if (ex is HttpRequestException)
                    Notify.ShowError("NC");
                else if (ex is HttpResponseException)
                    Notify.ShowError((ex as HttpResponseException).Code, ex);
                else
                    Notify.ShowError("FA", ex);
            }
        } 
        await DrawerMenuRef.ToggleAsync();  
        //await ILocalStorage.SetItemAsync("drawerState", ExpandedMenu);
    }   
    
    private async Task OnItemSelect(MenuCatalogoPorSesionDto selectedItem)
    { 
        if (selectedItem.EsGrupo)
        {
            selectedItem.EsExpandido = !selectedItem.EsExpandido; 
            ActivarEventoExpandedMenu(selectedItem);
            // if (selectedItem.EsExpandido)
            // {
            //     foreach (MenuCatalogoPorSesionDto item_otro in CatalogoMenus.Where(x => x.NumeroNivel == selectedItem.NumeroNivel && x.EsExpandido && x.ManejaGrupo && x.CodigoMenu != selectedItem.CodigoMenu))
            //     {
            //         item_otro.EsExpandido = false;
            //         ActivarEventoExpandedMenu(item_otro);
            //     }
            // }
        }
        else
        {
            SelectedMenuItem = selectedItem; 
            await ToggleMenuDrawer(); 
            INavigation.NavigateTo(selectedItem.RutaWeb); 
        } 
    }

    private void ActivarEventoExpandedMenu(MenuCatalogoPorSesionDto itemMenu)
    {
        foreach (MenuCatalogoPorSesionDto item in CatalogoMenus.Where(dato => dato.CodigoMenuReferencia == itemMenu.CodigoMenu))
        {  
            item.EsVisible = itemMenu.EsExpandido;
            if(item.EsGrupo && !itemMenu.EsExpandido)
            {
                item.EsExpandido = false;
                foreach(MenuCatalogoPorSesionDto subItem in CatalogoMenus.Where(y =>  y.CodigoMenuReferencia == item.CodigoMenu))
                {
                    subItem.EsVisible = false;
                }
            }
        }
    }

    public void Dispose()
    {
        IInterceptor.DisposeEvent();
        GC.SuppressFinalize(this);
    }
}