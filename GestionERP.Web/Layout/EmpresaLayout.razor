@layout TelerikLayout
@inherits LayoutComponentBase  
@inject HttpInterceptorService IInterceptor
@inject NavigationManager INavigation
@inject IPrincipalMenu IMenu
@inject IPrincipalEmpresa IEmpresa
@inject UserService IUser 
@using GestionERP.Web.Models.Dtos.Principal
@implements IDisposable

<div class="menu-container">
    @if (ExpandedMenu)
    {
        <TelerikButton Class="button-menu" Size="sm" OnClick="(() => ExpandedMenu = false)" Icon="@SvgIcon.X" FillMode="@(ThemeConstants.Button.FillMode.Flat)">Menú</TelerikButton>
    }
    else
    {
        <TelerikButton Class="button-menu" Size="sm" OnClick="@ToggleMenuDrawer" Icon="@SvgIcon.Menu" FillMode="@(ThemeConstants.Button.FillMode.Flat)">Menú</TelerikButton>
    }
    <span class="separator"></span>

    <figure>
        <a href="inicio">
            <img src="img/gerp_banner.png">
        </a>
    </figure>
    <h3 class="tk-title">estión ERP</h3>

    <EmpresaDisplay></EmpresaDisplay>
    <LoginDisplay></LoginDisplay>
</div>

<TelerikDrawer Width="260px" @ref="@DrawerMenuRef" Data="CatalogoMenus" @bind-Expanded="ExpandedMenu" Mode="@DrawerMode.Overlay">
    <Template>
        @if (CatalogoMenus != null)
        {
            <div class="k-drawer-items" role="menubar" aria-orientation="vertical">
                <ul>
                    @foreach (MenuCatalogoPorSesionDto item in context.Where(dato => dato.EsVisible))
                    {
                        string selectedClass = item == SelectedMenuItem ? "k-selected" : string.Empty;
                        string cursorGroup = item.EsGrupo ? "k-cursor-group" : "";
                        string expandedItem = item.EsExpandido ? "k-drawer-expanded" : "";

                        <li @onclick="@(() => OnItemSelect(item))" class="k-drawer-item @selectedClass k-level-@(item.Nivel) @cursorGroup @expandedItem">

                            <i class="fa-solid @(item.Icono)"></i>
                            <span class="k-item-text">@(item.NombreMenu)</span>

                            @if (item.EsExpandido && item.EsGrupo)
                            {
                                <i class="fa-solid fa-chevron-up k-arrow-align"></i>
                            }
                            else if (!item.EsExpandido && item.EsGrupo)
                            {
                                <i class="fa-solid fa-chevron-down k-arrow-align"></i>
                            }
                        </li>

                        if (item.Nivel is "0")
                        {
                            <li class="k-drawer-item k-drawer-separator k-cursor-group"></li>
                        }
                    }
                </ul>
            </div>
        }
    </Template>

    <DrawerContent>
        @Body
    </DrawerContent>
</TelerikDrawer>

@code {
    public bool ExpandedMenu { get; set; } = false;
    private MenuCatalogoPorSesionDto SelectedMenuItem { get; set; }
    private IEnumerable<MenuCatalogoPorSesionDto> CatalogoMenus { get; set; } = new List<MenuCatalogoPorSesionDto>();
    private TelerikDrawer<MenuCatalogoPorSesionDto> DrawerMenuRef { get; set; }
    public EmpresaConsultaPorCodigoWebDto Empresa { get; set; }
    public string CodigoWebEmpresa { get; set; } = "";
    [CascadingParameter] public NotifyComponent Notify { get; set; }

    protected override void OnInitialized()
    {
        IInterceptor.RegisterEvent();
        string[] url = INavigation.Uri.Replace(INavigation.BaseUri, "").Split("/");

        if (url.Length > 0)
            CodigoWebEmpresa = url[0].Substring(0, Math.Min(url[0].Length, 15));
    }

    private async Task ToggleMenuDrawer()
    {
        if (!ExpandedMenu)
        {
            try
            {
                CatalogoMenus = default;
                if (!(await IUser.VerificarAccesoEsValido(Notify, CodigoWebEmpresa)).esValido)
                    return;
                Empresa = await IEmpresa.ConsultaPorCodigoWeb(CodigoWebEmpresa);  
                CatalogoMenus = await IMenu.CatalogoPorSesion(Empresa.Codigo); 
            }
            catch (Exception ex)
            {
                if (ex is HttpRequestException)
                    Notify.ShowError("NC");
                else if (ex is HttpResponseException)
                    Notify.ShowError((ex as HttpResponseException).Code, ex);
                else
                    Notify.ShowError("FA", ex);
            }
        }
        await DrawerMenuRef.ToggleAsync();
    }

    private async Task OnItemSelect(MenuCatalogoPorSesionDto selectedItem)
    {
        if (selectedItem.EsGrupo)
        {
            selectedItem.EsExpandido = !selectedItem.EsExpandido;
            ActivarEventoExpandedMenu(selectedItem);
        }
        else
        {
            SelectedMenuItem = selectedItem;
            await ToggleMenuDrawer();
            INavigation.NavigateTo(selectedItem.RutaWeb.Replace("{cwe}", CodigoWebEmpresa));
        }
    }

    private void ActivarEventoExpandedMenu(MenuCatalogoPorSesionDto itemMenu)
    {
        foreach (MenuCatalogoPorSesionDto item in CatalogoMenus.Where(dato => dato.CodigoMenuReferencia == itemMenu.CodigoMenu))
        {
            item.EsVisible = itemMenu.EsExpandido;
            if (item.EsGrupo && !itemMenu.EsExpandido)
            {
                item.EsExpandido = false;
                foreach (MenuCatalogoPorSesionDto subItem in CatalogoMenus.Where(y => y.CodigoMenuReferencia == item.CodigoMenu))
                {
                    subItem.EsVisible = false;
                }
            }
        }
    }

    public void Dispose()
    {
        IInterceptor.DisposeEvent();
        GC.SuppressFinalize(this);
    }
}